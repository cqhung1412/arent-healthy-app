// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cqhung1412/arent-healthy-app/backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	sqlc "github.com/cqhung1412/arent-healthy-app/backend/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetCompositionByUserID mocks base method
func (m *MockStore) GetCompositionByUserID(arg0 context.Context, arg1 sql.NullInt64) ([]sqlc.GetCompositionByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositionByUserID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetCompositionByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositionByUserID indicates an expected call of GetCompositionByUserID
func (mr *MockStoreMockRecorder) GetCompositionByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositionByUserID", reflect.TypeOf((*MockStore)(nil).GetCompositionByUserID), arg0, arg1)
}

// GetDiaryEntriesByUserID mocks base method
func (m *MockStore) GetDiaryEntriesByUserID(arg0 context.Context, arg1 sql.NullInt64) ([]sqlc.GetDiaryEntriesByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiaryEntriesByUserID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetDiaryEntriesByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiaryEntriesByUserID indicates an expected call of GetDiaryEntriesByUserID
func (mr *MockStoreMockRecorder) GetDiaryEntriesByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiaryEntriesByUserID", reflect.TypeOf((*MockStore)(nil).GetDiaryEntriesByUserID), arg0, arg1)
}

// GetExercisesByUserID mocks base method
func (m *MockStore) GetExercisesByUserID(arg0 context.Context, arg1 sql.NullInt64) ([]sqlc.GetExercisesByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExercisesByUserID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetExercisesByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExercisesByUserID indicates an expected call of GetExercisesByUserID
func (mr *MockStoreMockRecorder) GetExercisesByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExercisesByUserID", reflect.TypeOf((*MockStore)(nil).GetExercisesByUserID), arg0, arg1)
}

// GetMealsByUserID mocks base method
func (m *MockStore) GetMealsByUserID(arg0 context.Context, arg1 sql.NullInt64) ([]sqlc.GetMealsByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMealsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetMealsByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMealsByUserID indicates an expected call of GetMealsByUserID
func (mr *MockStoreMockRecorder) GetMealsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMealsByUserID", reflect.TypeOf((*MockStore)(nil).GetMealsByUserID), arg0, arg1)
}

// GetUserByID mocks base method
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int64) (sqlc.GetUserByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.GetUserByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}
