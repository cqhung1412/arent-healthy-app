// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: meal.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getMealsByUserID = `-- name: GetMealsByUserID :many
SELECT 
  id,
  datestamp,
  type,
  image_path
FROM meals
WHERE user_id = $1
ORDER BY datestamp DESC
`

type GetMealsByUserIDRow struct {
	ID        int64     `json:"id"`
	Datestamp time.Time `json:"datestamp"`
	Type      string    `json:"type"`
	ImagePath string    `json:"image_path"`
}

func (q *Queries) GetMealsByUserID(ctx context.Context, userID sql.NullInt64) ([]GetMealsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMealsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMealsByUserIDRow{}
	for rows.Next() {
		var i GetMealsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Datestamp,
			&i.Type,
			&i.ImagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
