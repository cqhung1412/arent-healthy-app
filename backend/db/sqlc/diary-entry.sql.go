// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: diary-entry.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getDiaryEntriesByUserID = `-- name: GetDiaryEntriesByUserID :many
SELECT
  id,
  entry,
  created_at
FROM diary_entries
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetDiaryEntriesByUserIDRow struct {
	ID        int64     `json:"id"`
	Entry     string    `json:"entry"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetDiaryEntriesByUserID(ctx context.Context, userID sql.NullInt64) ([]GetDiaryEntriesByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getDiaryEntriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiaryEntriesByUserIDRow{}
	for rows.Next() {
		var i GetDiaryEntriesByUserIDRow
		if err := rows.Scan(&i.ID, &i.Entry, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
