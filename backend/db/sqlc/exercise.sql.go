// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: exercise.sql

package db

import (
	"context"
	"database/sql"
)

const getExercisesByUserID = `-- name: GetExercisesByUserID :many
SELECT
  id,
  name,
  kcal,
  minutes
FROM excercises
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetExercisesByUserIDRow struct {
	ID      int64  `json:"id"`
	Name    string `json:"name"`
	Kcal    int32  `json:"kcal"`
	Minutes int32  `json:"minutes"`
}

func (q *Queries) GetExercisesByUserID(ctx context.Context, userID sql.NullInt64) ([]GetExercisesByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getExercisesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetExercisesByUserIDRow{}
	for rows.Next() {
		var i GetExercisesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Kcal,
			&i.Minutes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
