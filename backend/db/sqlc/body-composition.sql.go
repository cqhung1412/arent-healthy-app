// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: body-composition.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getCompositionByUserID = `-- name: GetCompositionByUserID :many
SELECT
  id,
  monthstamp,
  weight,
  body_fat
FROM body_compositions
WHERE user_id = $1
ORDER BY monthstamp DESC
`

type GetCompositionByUserIDRow struct {
	ID         int64     `json:"id"`
	Monthstamp time.Time `json:"monthstamp"`
	Weight     int32     `json:"weight"`
	BodyFat    int32     `json:"body_fat"`
}

func (q *Queries) GetCompositionByUserID(ctx context.Context, userID sql.NullInt64) ([]GetCompositionByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompositionByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCompositionByUserIDRow{}
	for rows.Next() {
		var i GetCompositionByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Monthstamp,
			&i.Weight,
			&i.BodyFat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
